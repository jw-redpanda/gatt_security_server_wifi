diff --git a/components/bt/controller/bt.c b/components/bt/controller/bt.c
index 49cb0d44a1..9bae7de304 100644
--- a/components/bt/controller/bt.c
+++ b/components/bt/controller/bt.c
@@ -462,9 +462,8 @@ static inline void btdm_check_and_init_bb(void)
 #if CONFIG_SPIRAM_USE_MALLOC
 static bool btdm_queue_generic_register(const btdm_queue_item_t *queue)
 {
-    if (!btdm_queue_table_mux || !queue) {
-        return NULL;
-    }
+    assert(btdm_queue_table_mux != NULL);
+    assert(queue != NULL);
 
     bool ret = false;
     btdm_queue_item_t *item;
@@ -478,14 +477,14 @@ static bool btdm_queue_generic_register(const btdm_queue_item_t *queue)
         }
     }
     xSemaphoreGive(btdm_queue_table_mux);
+    assert(ret);
     return ret;
 }
 
 static bool btdm_queue_generic_deregister(btdm_queue_item_t *queue)
 {
-    if (!btdm_queue_table_mux || !queue) {
-        return false;
-    }
+    assert(btdm_queue_table_mux != NULL);
+    assert(queue != NULL);
 
     bool ret = false;
     btdm_queue_item_t *item;
@@ -675,8 +674,8 @@ static void mutex_delete_wrapper(void *mutex)
         free(item.buffer);
     }
 
-    return;
 #endif
+    return;
 }
 
 static int32_t mutex_lock_wrapper(void *mutex)
@@ -756,9 +755,9 @@ static void queue_delete_wrapper(void *queue)
         free(item.storage);
         free(item.buffer);
     }
+#endif
 
     return;
-#endif
 }
 
 static int32_t queue_send_wrapper(void *queue, void *item, uint32_t block_time_ms)
diff --git a/components/esp_wifi/esp32/esp_adapter.c b/components/esp_wifi/esp32/esp_adapter.c
index 80bd879aed..52146ada17 100644
--- a/components/esp_wifi/esp32/esp_adapter.c
+++ b/components/esp_wifi/esp32/esp_adapter.c
@@ -50,6 +50,57 @@
 
 #define TAG "esp_adapter"
 
+#if CONFIG_SPIRAM_USE_MALLOC
+/* SPIRAM Configuration */
+#define COEX_MAX_QUEUE_NUM       (2)
+
+
+/* PSRAM configuration */
+typedef struct {
+    QueueHandle_t handle;
+    void *storage;
+    void *buffer;
+} coex_queue_item_t;
+
+static DRAM_ATTR coex_queue_item_t coex_queue_table[COEX_MAX_QUEUE_NUM];
+
+static bool coex_queue_generic_register(const coex_queue_item_t *queue)
+{
+    // Coexist model will only create sempher twice in coex_pre_init when CPU start,
+    // And will never delete.
+    // So we do not need use mutex to protect it.
+
+    bool ret = false;
+    coex_queue_item_t *item;
+    for (int i = 0; i < COEX_MAX_QUEUE_NUM; ++i) {
+        item = &coex_queue_table[i];
+        if (item->handle == NULL) {
+            memcpy(item, queue, sizeof(coex_queue_item_t));
+            ret = true;
+            break;
+        }
+    }
+    assert(ret);
+    return ret;
+}
+
+static bool coex_queue_generic_deregister(coex_queue_item_t *queue)
+{
+    bool ret = false;
+    coex_queue_item_t *item;
+    for (int i = 0; i < COEX_MAX_QUEUE_NUM; ++i) {
+        item = &coex_queue_table[i];
+        if (item->handle == queue->handle) {
+            memcpy(queue, item, sizeof(coex_queue_item_t));
+            memset(item, 0, sizeof(coex_queue_item_t));
+            ret = true;
+            break;
+        }
+    }
+    return ret;
+}
+#endif
+
 static void IRAM_ATTR s_esp_dport_access_stall_other_cpu_start(void)
 {
     DPORT_STALL_OTHER_CPU_START();
@@ -225,6 +276,71 @@ static void semphr_delete_wrapper(void *semphr)
     vSemaphoreDelete(semphr);
 }
 
+static void *coex_semphr_create_wrapper(uint32_t max, uint32_t init)
+{
+    void *handle = NULL;
+
+#if !CONFIG_SPIRAM_USE_MALLOC
+    handle = (void *)xSemaphoreCreateCounting(max, init);
+#else
+    StaticQueue_t *queue_buffer = NULL;
+
+    queue_buffer = heap_caps_malloc(sizeof(StaticQueue_t), MALLOC_CAP_INTERNAL|MALLOC_CAP_8BIT);
+    if (!queue_buffer) {
+        goto error;
+    }
+
+    handle = (void *)xSemaphoreCreateCountingStatic(max, init, queue_buffer);
+    if (!handle) {
+        goto error;
+    }
+
+    coex_queue_item_t item = {
+        .handle = handle,
+        .storage = NULL,
+        .buffer = queue_buffer,
+    };
+
+    if (!coex_queue_generic_register(&item)) {
+        goto error;
+    }
+#endif
+
+    return handle;
+
+#if CONFIG_SPIRAM_USE_MALLOC
+ error:
+    if (handle) {
+        vSemaphoreDelete(handle);
+    }
+    if (queue_buffer) {
+        free(queue_buffer);
+    }
+
+    return NULL;
+#endif
+
+}
+
+static void coex_semphr_delete_wrapper(void *semphr)
+{
+#if !CONFIG_SPIRAM_USE_MALLOC
+    vSemaphoreDelete(semphr);
+#else
+    coex_queue_item_t item = {
+        .handle = semphr,
+        .storage = NULL,
+        .buffer = NULL,
+    };
+
+    if (coex_queue_generic_deregister(&item)) {
+        vSemaphoreDelete(item.handle);
+        free(item.buffer);
+    }
+#endif
+}
+
+
 static void wifi_thread_semphr_free(void* data)
 {
     xSemaphoreHandle *sem = (xSemaphoreHandle*)(data);
@@ -701,8 +817,8 @@ coex_adapter_funcs_t g_coex_adapter_funcs = {
     ._int_disable = wifi_int_disable_wrapper,
     ._int_enable = wifi_int_restore_wrapper,
     ._task_yield_from_isr = task_yield_from_isr_wrapper,
-    ._semphr_create = semphr_create_wrapper,
-    ._semphr_delete = semphr_delete_wrapper,
+    ._semphr_create = coex_semphr_create_wrapper,
+    ._semphr_delete = coex_semphr_delete_wrapper,
     ._semphr_take_from_isr = semphr_take_from_isr_wrapper,
     ._semphr_give_from_isr = semphr_give_from_isr_wrapper,
     ._semphr_take = semphr_take_wrapper,
